<%- include('partials/videosHeader'); -%>

  <div class="video-center-container">
    <div class="video-container paused" data-volume-level="high">
      <img class="thumbnail-img" alt="Video Thumbnail" />
      <div class="video-controls-container">
        <div class="timeline-container">
          <div class="timeline">
            <img class="preview-img" alt="Video Preview" />
            <div class="thumb-indicator"></div>
          </div>
        </div>
        <div class="controls">
          <button class="play-pause-btn" aria-label="Play/Pause">
            <svg class="play-icon" viewBox="0 0 24 24">
              <path fill="currentColor" d="M8,5.14V19.14L19,12.14L8,5.14Z" />
            </svg>
            <svg class="pause-icon" viewBox="0 0 24 24">
              <path fill="currentColor" d="M14,19H18V5H14M6,19H10V5H6V19Z" />
            </svg>
          </button>
          <div class="volume-container">
            <button class="mute-btn" aria-label="Mute/Unmute">
              <svg class="volume-high-icon" viewBox="0 0 24 24">
                <path fill="currentColor"
                  d="M14,3.23V5.29C16.89,6.15 19,8.83 19,12C19,15.17 16.89,17.84 14,18.7V20.77C18,19.86 21,16.28 21,12C21,7.72 18,4.14 14,3.23M16.5,12C16.5,10.23 15.5,8.71 14,7.97V16C15.5,15.29 16.5,13.76 16.5,12M3,9V15H7L12,20V4L7,9H3Z" />
              </svg>
              <svg class="volume-low-icon" viewBox="0 0 24 24">
                <path fill="currentColor"
                  d="M5,9V15H9L14,20V4L9,9M18.5,12C18.5,10.23 17.5,8.71 16,7.97V16C17.5,15.29 18.5,13.76 18.5,12Z" />
              </svg>
              <svg class="volume-muted-icon" viewBox="0 0 24 24">
                <path fill="currentColor"
                  d="M12,4L9.91,6.09L12,8.18M4.27,3L3,4.27L7.73,9H3V15H7L12,20V13.27L16.25,17.53C15.58,18.04 14.83,18.46 14,18.7V20.77C15.38,20.45 16.63,19.82 17.68,18.96L19.73,21L21,19.73L12,10.73M19,12C19,12.94 18.8,13.82 18.46,14.64L19.97,16.15C20.62,14.91 21,13.5 21,12C21,7.72 18,4.14 14,3.23V5.29C16.89,6.15 19,8.83 19,12M16.5,12C16.5,10.23 15.5,8.71 14,7.97V10.18L16.45,12.63C16.5,12.43 16.5,12.21 16.5,12Z" />
              </svg>
            </button>
            <input class="volume-slider" type="range" min="0" max="1" step="any" value="1" aria-label="Volume Slider" />
          </div>
          <div class="duration-container">
            <div class="current-time">0:00</div>
            /
            <div class="total-time"></div>
          </div>
          <div class="skip-btn">
            <button id="previous-btn" aria-label="Previous Video">
              <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px"
                fill="currentColor">
                <path d="M220-240v-480h80v480h-80Zm520 0L380-480l360-240v480Zm-80-240Zm0 90v-180l-136 90 136 90Z" />
              </svg>
            </button>
            <button id="next-btn" aria-label="Next Video">
              <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px"
                fill="currentColor">
                <path d="M660-240v-480h80v480h-80Zm-440 0v-480l360 240-360 240Zm80-240Zm0 90 136-90-136-90v180Z" />
              </svg>
            </button>
          </div>
          <button id="share-btn" class="share-btn">
            <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e8eaed">
              <path d="M120-160v-640l760 320-760 320Zm80-120 474-200-474-200v140l240 60-240 60v140Zm0 0v-400 400Z" />
            </svg>
          </button>
          <button class="speed-btn wide-btn" aria-label="Playback Speed">
            1x
          </button>
          <button class="mini-player-btn" aria-label="Mini Player">
            <svg viewBox="0 0 24 24">
              <path fill="currentColor"
                d="M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H3V5h18v14zm-10-7h9v6h-9z" />
            </svg>
          </button>
          <button class="theater-btn" aria-label="Theater Mode">
            <svg class="tall" viewBox="0 0 24 24">
              <path fill="currentColor"
                d="M19 6H5c-1.1 0-2 .9-2 2v8c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm0 10H5V8h14v8z" />
            </svg>
            <svg class="wide" viewBox="0 0 24 24">
              <path fill="currentColor"
                d="M19 7H5c-1.1 0-2 .9-2 2v6c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2zm0 8H5V9h14v6z" />
            </svg>
          </button>
          <button class="full-screen-btn" aria-label="Full Screen">
            <svg class="open" viewBox="0 0 24 24">
              <path fill="currentColor"
                d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z" />
            </svg>
            <svg class="close" viewBox="0 0 24 24">
              <path fill="currentColor"
                d="M5 16h3v3h2v-5H5v2zm3-8H5v2h5V5H8v3zm6 11h2v-3h3v-2h-5v5zm2-11V5h-2v5h5V8h-3z" />
            </svg>
          </button>
        </div>
      </div>
      <video id="video-player" src="">
        <!-- <track kind="captions" srclang="en" src=""> -->
      </video>
    </div>
  </div>
  </body>

  </html>

  <script>
    document.addEventListener("DOMContentLoaded", async () => {
      const urlParams = new URLSearchParams(window.location.search);
      const videoId = urlParams.get("videoId");

      let videoIds = [];
      let currentIndex = -1;

      // Fetch all video IDs for next and previous buttons
      try {
        const response = await fetch("/api/video-ids");
        const data = await response.json();
        videoIds = data.videoIds;
        currentIndex = videoIds.indexOf(videoId);
        setupNavigation();
        updateNavigationButtons(); // Initial call to update button visibility
      } catch (error) {
        console.error("Error fetching video IDs:", error);
      }

      // Fetch the video details if a videoId is provided
      if (videoId) {
        try {
          const response = await fetch(`/api/videos/${videoId}`);
          const data = await response.json();

          if (data && data.video) {
            const videoElement = document.getElementById("video-player");
            videoElement.src = data.video.filePath;

            // Populate other video details if needed
            const thumbnailImg = document.querySelector(".thumbnail-img");
            thumbnailImg.src = data.video.thumbnail;

            // Update preview images if available
            const previewImages = data.video.previewImages;
            if (previewImages && previewImages.length > 0) {
              const previewImg = document.querySelector(".preview-img");
              previewImg.src = previewImages[0];
            }
          } else {
            console.error("Video not found");
          }
        } catch (error) {
          console.error("Error fetching video details:", error);
        }
      } else {
        console.error("No videoId found in URL");
      }

      // Video player controls code
      const Video = document.querySelector("video");
      const videoContainer = document.querySelector(".video-container");
      const playPauseBtn = document.querySelector(".play-pause-btn");
      const theaterBtn = document.querySelector(".theater-btn");
      const fullScreenBtn = document.querySelector(".full-screen-btn");
      const miniPlayerBtn = document.querySelector(".mini-player-btn");
      const muteBtn = document.querySelector(".mute-btn");
      const speedBtn = document.querySelector(".speed-btn");
      const currentTimeElem = document.querySelector(".current-time");
      const totalTimeElem = document.querySelector(".total-time");
      const volumeSlider = document.querySelector(".volume-slider");
      const timelineContainer = document.querySelector(".timeline-container");

      document.addEventListener("keydown", (e) => {
        const tagName = document.activeElement.tagName.toLowerCase();

        if (tagName === "input") return;

        switch (e.key.toLowerCase()) {
          case " ":
            if (tagName === "button") return;
          case "k":
            togglePlay();
            break;
          case "f":
            toggleFullScreenMode();
            break;
          case "t":
            toggleTheaterMode();
            break;
          case "i":
            toggleMiniPlayerMode();
            break;
          case "m":
            toggleMute();
            break;
          case "arrowleft":
          case "j":
            skip(-5);
            break;
          case "arrowright":
          case "l":
            skip(5);
            break;
          case "c":
            toggleCaptions();
            break;
        }
      });

      // Play/Pause Button
      playPauseBtn.addEventListener("click", togglePlay);
      Video.addEventListener("click", togglePlay);

      function togglePlay() {
        Video.paused ? Video.play() : Video.pause();
      }

      Video.addEventListener("play", () => {
        videoContainer.classList.remove("paused");
      });

      Video.addEventListener("pause", () => {
        videoContainer.classList.add("paused");
      });

      // Theater Mode Button
      theaterBtn.addEventListener("click", toggleTheaterMode);

      function toggleTheaterMode() {
        videoContainer.classList.toggle("theater");
      }

      // Full Screen Button
      fullScreenBtn.addEventListener("click", toggleFullScreenMode);

      function toggleFullScreenMode() {
        if (document.fullscreenElement == null) {
          videoContainer.requestFullscreen();
        } else {
          document.exitFullscreen();
        }
      }

      // Mini Player Button
      miniPlayerBtn.addEventListener("click", toggleMiniPlayerMode);

      function toggleMiniPlayerMode() {
        if (videoContainer.classList.contains("mini-player")) {
          document.exitPictureInPicture();
        } else {
          Video.requestPictureInPicture();
        }
      }

      // Mute Button
      muteBtn.addEventListener("click", toggleMute);

      function toggleMute() {
        Video.muted = !Video.muted;
      }

      Video.addEventListener("volumechange", () => {
        volumeSlider.value = Video.volume;
        let volumeLevel;
        if (Video.muted || Video.volume === 0) {
          volumeSlider.value = 0;
          volumeLevel = "muted";
        } else if (Video.volume >= 0.5) {
          volumeLevel = "high";
        } else {
          volumeLevel = "low";
        }

        videoContainer.dataset.volumeLevel = volumeLevel;
      });

      // Speed Button
      speedBtn.addEventListener("click", changePlaybackSpeed);

      function changePlaybackSpeed() {
        let newPlaybackRate = Video.playbackRate + 0.25;
        if (newPlaybackRate > 2) newPlaybackRate = 0.25;
        Video.playbackRate = newPlaybackRate;
        speedBtn.textContent = `${newPlaybackRate}x`;
      }

      // Current Time and Total Time
      Video.addEventListener("loadeddata", () => {
        totalTimeElem.textContent = formatDuration(Video.duration);
      });

      Video.addEventListener("timeupdate", () => {
        currentTimeElem.textContent = formatDuration(Video.currentTime);
        const percent = Video.currentTime / Video.duration;
        timelineContainer.style.setProperty("--progress-position", percent);
      });

      // Volume Slider
      volumeSlider.addEventListener("input", (e) => {
        Video.volume = e.target.value;
        Video.muted = e.target.value === 0;
      });

      // Functions for formatting duration and skipping
      const leadingZeroFormatter = new Intl.NumberFormat(undefined, {
        minimumIntegerDigits: 2,
      });

      function formatDuration(time) {
        const seconds = Math.floor(time % 60);
        const minutes = Math.floor(time / 60) % 60;
        const hours = Math.floor(time / 3600);
        if (hours === 0) {
          return `${minutes}:${leadingZeroFormatter.format(seconds)}`;
        } else {
          return `${hours}:${leadingZeroFormatter.format(
            minutes
          )}:${leadingZeroFormatter.format(seconds)}`;
        }
      }

      function skip(duration) {
        Video.currentTime += duration;
      }

      function toggleCaptions() {
        const captions = Video.textTracks[0];
        const isHidden = captions.mode === "hidden";
        captions.mode = isHidden ? "showing" : "hidden";
        videoContainer.classList.toggle("captions", isHidden);
      }

      function setupNavigation() {
        const nextBtn = document.getElementById("next-btn");
        const prevBtn = document.getElementById("previous-btn");

        nextBtn.addEventListener("click", () => {
          if (currentIndex < videoIds.length - 1) {
            currentIndex++;
            navigateToVideo(videoIds[currentIndex]);
          }
          updateNavigationButtons();
        });

        prevBtn.addEventListener("click", () => {
          if (currentIndex > 0) {
            currentIndex--;
            navigateToVideo(videoIds[currentIndex]);
          }
          updateNavigationButtons();
        });

        // Initial update of button visibility
        updateNavigationButtons();
      }

      function navigateToVideo(videoId) {
        window.location.href = `/watch?videoId=${videoId}`;
      }

      function updateNavigationButtons() {
        const nextBtn = document.getElementById("next-btn");
        const prevBtn = document.getElementById("previous-btn");

        if (currentIndex >= videoIds.length - 1) {
          nextBtn.style.display = "none";
        } else {
          nextBtn.style.display = "inline-block";
        }

        if (currentIndex <= 0) {
          prevBtn.style.display = "none";
        } else {
          prevBtn.style.display = "inline-block";
        }
      }
    });
  </script>